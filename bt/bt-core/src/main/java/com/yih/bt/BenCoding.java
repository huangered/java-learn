package com.yih.bt;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public final class BenCoding {

    public String code(Object obj) {

        if (obj instanceof String)
            return code((String) obj);
        else if (obj instanceof Integer)
            return code((Integer) obj);
        else if (obj instanceof List)
            return code((List) obj);
        else if (obj instanceof Map)
            return code((Map) obj);
        return "";
    }

    private String code(String target) {
        String str = String.format("%d:%s", target.length(), target);
        return str;
    }

    private String code(Integer target) {
        String str = String.format("i%de", target);
        return str;
    }

    private String code(List<?> target) {
        StringBuilder builder = new StringBuilder("l");
        for (Object obj : target) {
            builder.append(code(obj));
        }
        builder.append("e");
        return builder.toString();
    }

    private String code(Map<String, Object> target) {
        StringBuilder builder = new StringBuilder("d");

        for (Map.Entry<String, Object> entry : target.entrySet()) {
            builder.append(code(entry.getKey()));
            builder.append(code(entry.getValue()));
        }

        builder.append("e");
        return builder.toString();
    }

    public Object decode(String str) {
        StringBuf buf = StringBuf.create(str);
        Object obj = decode(buf);
        return obj;
    }

    private Object decode(StringBuf buf) {
        char f = buf.get();
        if (f == 'i') {
            // parse int
            return decodeInt(buf);
        } else if (f == 'l') {
            // parse list
            return decodeList(buf);
        } else if (f == 'd') {
            // parse dict
            return decodeMap(buf);
        } else {
            // parse str
            buf.back();
            return decodeStr(buf);
        }
    }

    private String decodeInt(StringBuf buf) {
        StringBuilder builder = new StringBuilder();
        char word = buf.get();
        while (word != 'e') {
            builder.append(word);
            word = buf.get();
        }
        String num = builder.toString();
        return num;
    }

    private String decodeStr(StringBuf str) {
        StringBuilder builder = new StringBuilder();
        char word = str.get();

        while (word != ':') {
            builder.append(word);
            word = str.get();
        }
        String num = builder.toString();
        int count = Integer.parseInt(num);
        String count1 = str.get(count);
        return count1;
    }

    private List decodeList(StringBuf buf) {
        List data = new ArrayList();
        char end;
        do {
            Object obj = decode(buf);
            data.add(obj);
            end = buf.get();
            buf.back();
        } while (end != 'e');
        buf.get();
        return data;
    }

    private Map decodeMap(StringBuf buf) {
        Map map = new HashMap();
        char end;
        do {
            Object key = decode(buf);
            Object value = decode(buf);
            map.put(key, value);
            end = buf.get();
            buf.back();
        } while (end != 'e');
        buf.get();
        return map;
    }

}

class StringBuf {
    private String data;

    private int loc;

    private StringBuf(String str, int i) {
        data = str;
        loc = i;
    }

    public static StringBuf create(String str) {
        StringBuf buf = new StringBuf(str, 0);
        return buf;
    }

    public char get() {
        return data.charAt(loc++);
    }

    public String get(int len) {
        String dat = data.substring(loc, loc + len);
        loc += len;
        return dat;
    }

    public void back() {
        loc--;
    }

    public int len() {
        return data.length();
    }
}